{"ast":null,"code":"import _toConsumableArray from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/zero/famers-market/farmers-market/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/zero/famers-market/farmers-market/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Identicon from 'identicon';\nimport SupplyChain from \"src/abis/SupplyChain.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport Product from \"./Product\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkSupplyChain, supplyChain, skuCount, i, product;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkSupplyChain = SupplyChain.networks[networkId];\n\n                if (!networkSupplyChain) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                supplyChain = new web3.eth.Contract(SupplyChain.abi, networkSupplyChain.address);\n                this.setState({\n                  supplyChain: supplyChain\n                });\n                _context3.next = 15;\n                return supplyChain.methods.sku().call();\n\n              case 15:\n                skuCount = _context3.sent;\n                this.setState({\n                  skuCount: skuCount\n                });\n                i = 1;\n\n              case 18:\n                if (!(i <= skuCount)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 21;\n                return supplyChain.methods.getProductBuy(i).call();\n\n              case 21:\n                product = _context3.sent;\n                this.setState({\n                  products: [].concat(_toConsumableArray(this.state.products), [product])\n                });\n                console.log({\n                  products: this.state.products\n                });\n\n              case 24:\n                i++;\n                _context3.next = 18;\n                break;\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.RegisterFarmerHandler = function () {\n      _this.state.supplyChain.methods.addFarmer().send({\n        from: _this.state.account\n      });\n    };\n\n    _this.RegisterDistributorHandler = function () {\n      _this.state.supplyChain.methods.addDistributor().send({\n        from: _this.state.account\n      });\n    };\n\n    _this.RegisterConsumerHandler = function () {\n      _this.state.supplyChain.methods.addConsumer().send({\n        from: _this.state.account\n      });\n    };\n\n    _this.RegisterRetailerHandler = function () {\n      _this.state.supplyChain.methods.addRetailer().send({\n        from: _this.state.account\n      });\n    };\n\n    _this.onpostProduct = function (event, upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes) {\n      // this.setState({ loading: true })\n      event.preventDefault();\n\n      _this.state.supplyChain.methods.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes).send({\n        from: _this.state.account\n      });\n    };\n\n    _this.state = {\n      web3: null,\n      account: null,\n      contract: null,\n      supplyChain: null,\n      products: [],\n      skuCount: 0\n    };\n    return _this;\n  } // componentDidMount = async () => {\n  //   try {\n  //     // Get network provider and web3 instance.\n  //     const web3 = await getWeb3();\n  //     // Use web3 to get the user's accounts.\n  //     const accounts = await web3.eth.getAccounts();\n  //     // Get the contract instance.\n  //     const networkId = await web3.eth.net.getId();\n  //     const deployedNetwork = SimpleStorageContract.networks[networkId];\n  //     const instance = new web3.eth.Contract(\n  //       SimpleStorageContract.abi,\n  //       deployedNetwork && deployedNetwork.address,\n  //     );\n  //     // Set web3, accounts, and contract to the state, and then proceed with an\n  //     // example of interacting with the contract's methods.\n  //     this.setState({ web3, accounts, contract: instance }, this.runExample);\n  //   } catch (error) {\n  //     // Catch any errors for any of the above operations.\n  //     alert(\n  //       `Failed to load web3, accounts, or contract. Check console for details.`,\n  //     );\n  //     console.error(error);\n  //   }\n  // };\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //   // await contract.methods.set(5).send({ from: accounts[0] });\n  //   // // Get the value from the contract to prove it worked.\n  //   // const response = await contract.methods.get().call();\n  //   // // Update state with the result.\n  //   // this.setState({ storageValue: response });\n  // };\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // if (!this.state.web3) {\n      //   return <div>Loading Web3, accounts, and contract...</div>;\n      // }\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Good to Go!\"), React.createElement(\"button\", {\n        onClick: this.RegisterFarmerHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Register has Farmer\"), React.createElement(\"button\", {\n        onClick: this.RegisterDistributorHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Register has Distributor\"), React.createElement(\"button\", {\n        onClick: this.RegisterRetailerHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Register has Retailer\"), React.createElement(\"button\", {\n        onClick: this.RegisterConsumerHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Register has Consumer\"), React.createElement(Product, {\n        products: this.state.products,\n        postProduct: this.onpostProduct,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/zero/famers-market/farmers-market/src/components/App.js"],"names":["React","Component","Identicon","SupplyChain","Web3","Navbar","Product","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkSupplyChain","networks","supplyChain","Contract","abi","address","methods","sku","call","skuCount","i","getProductBuy","product","products","state","props","RegisterFarmerHandler","addFarmer","send","from","RegisterDistributorHandler","addDistributor","RegisterConsumerHandler","addConsumer","RegisterRetailerHandler","addRetailer","onpostProduct","event","upc","originFarmerID","originFarmName","originFarmInformation","originFarmLatitude","originFarmLongitude","productNotes","preventDefault","harvestItem","contract"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Identicon from 'identicon';\nimport SupplyChain from \"src/abis/SupplyChain.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport Product from \"./Product\";\n\n\nclass App extends Component {\n \n  async  componentWillMount(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    \n    \n  }\n  \n\n  async loadWeb3() {\n    \n    \n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n  async loadBlockchainData(){\n    \n     const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n    this.setState({account:accounts[0]})\n    const networkId =await web3.eth.net.getId()\n    const networkSupplyChain= SupplyChain.networks[networkId]\n    if (networkSupplyChain)\n    {\n      let supplyChain = new  web3.eth.Contract(SupplyChain.abi,networkSupplyChain.address)\n      this.setState({supplyChain:supplyChain})\n\n      const skuCount=await supplyChain.methods.sku().call()\n      this.setState({skuCount})\n\n      for (var i = 1; i <= skuCount; i++) {\n        const product = await supplyChain.methods.getProductBuy(i).call()\n  \n        this.setState({\n          products: [...this.state.products, product]\n        })\n        console.log({products:this.state.products})\n      }\n    }\n\n    \n      \n\n\n    \n\n  }\n\n  RegisterFarmerHandler=()=>{\n\n    this.state.supplyChain.methods.addFarmer().send({ from: this.state.account })\n\n  }\n\n  RegisterDistributorHandler=()=>{\n\n    this.state.supplyChain.methods.addDistributor().send({ from: this.state.account })\n\n  }\n  RegisterConsumerHandler=()=>{\n\n    this.state.supplyChain.methods.addConsumer().send({ from: this.state.account })\n\n  }\n  RegisterRetailerHandler=()=>{\n\n    this.state.supplyChain.methods.addRetailer().send({ from: this.state.account }) \n\n  }\n  onpostProduct=(event,upc,\n    originFarmerID,\n    originFarmName,\n    originFarmInformation,\n    originFarmLatitude,\n    originFarmLongitude,\n    productNotes) =>{\n    // this.setState({ loading: true })\n    event.preventDefault()\n    this.state.supplyChain.methods.harvestItem(\n      upc,\n      originFarmerID,\n      originFarmName,\n      originFarmInformation,\n      originFarmLatitude,\n      originFarmLongitude,\n      productNotes\n      ).send({ from: this.state.account })\n    \n  }\n\n  constructor(props){\n\n     super(props)\n    this. state = { \n     web3: null, \n     account: null, \n     contract: null,\n     supplyChain:null,\n     products:[],\n     skuCount:0 \n    \n    }\n\n\n  }\n\n\n  // componentDidMount = async () => {\n  //   try {\n  //     // Get network provider and web3 instance.\n  //     const web3 = await getWeb3();\n\n  //     // Use web3 to get the user's accounts.\n  //     const accounts = await web3.eth.getAccounts();\n\n  //     // Get the contract instance.\n  //     const networkId = await web3.eth.net.getId();\n  //     const deployedNetwork = SimpleStorageContract.networks[networkId];\n  //     const instance = new web3.eth.Contract(\n  //       SimpleStorageContract.abi,\n  //       deployedNetwork && deployedNetwork.address,\n  //     );\n\n  //     // Set web3, accounts, and contract to the state, and then proceed with an\n  //     // example of interacting with the contract's methods.\n  //     this.setState({ web3, accounts, contract: instance }, this.runExample);\n  //   } catch (error) {\n  //     // Catch any errors for any of the above operations.\n  //     alert(\n  //       `Failed to load web3, accounts, or contract. Check console for details.`,\n  //     );\n  //     console.error(error);\n  //   }\n  // };\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n\n  //   // Stores a given value, 5 by default.\n  //   // await contract.methods.set(5).send({ from: accounts[0] });\n\n  //   // // Get the value from the contract to prove it worked.\n  //   // const response = await contract.methods.get().call();\n\n  //   // // Update state with the result.\n  //   // this.setState({ storageValue: response });\n  // };\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return (\n      <div >\n        <Navbar account= {this.state.account}/>\n        <h1>Good to Go!</h1>\n        <button onClick={this.RegisterFarmerHandler} >Register has Farmer</button>\n        <button onClick={this.RegisterDistributorHandler} >Register has Distributor</button>\n        <button onClick={this.RegisterRetailerHandler} >Register has Retailer</button>\n        <button onClick={this.RegisterConsumerHandler} >Register has Consumer</button>\n\n        <Product \n        products={this.state.products}\n        postProduct={this.onpostProduct}\n         />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}