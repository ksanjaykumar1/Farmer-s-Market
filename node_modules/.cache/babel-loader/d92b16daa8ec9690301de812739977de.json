{"ast":null,"code":"/*\n * @author  Don Park\n * @version 0.2\n * @date    January 21th, 2007\n *\n * (The MIT License)\n *\n * Copyright (c) 2007-2012 Don Park <donpark@docuverse.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nvar crypto = require('crypto');\n\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nvar Canvas = isBrowser ? require('./lib/canvas') : require('canvas');\nvar patch0 = new Array(0, 4, 24, 20);\nvar patch1 = new Array(0, 4, 20);\nvar patch2 = new Array(2, 24, 20);\nvar patch3 = new Array(0, 2, 20, 22);\nvar patch4 = new Array(2, 14, 22, 10);\nvar patch5 = new Array(0, 14, 24, 22);\nvar patch6 = new Array(2, 24, 22, 13, 11, 22, 20);\nvar patch7 = new Array(0, 14, 22);\nvar patch8 = new Array(6, 8, 18, 16);\nvar patch9 = new Array(4, 20, 10, 12, 2);\nvar patch10 = new Array(0, 2, 12, 10);\nvar patch11 = new Array(10, 14, 22);\nvar patch12 = new Array(20, 12, 24);\nvar patch13 = new Array(10, 2, 12);\nvar patch14 = new Array(0, 2, 10);\nvar patchTypes = new Array(patch0, patch1, patch2, patch3, patch4, patch5, patch6, patch7, patch8, patch9, patch10, patch11, patch12, patch13, patch14, patch0);\nvar centerPatchTypes = new Array(0, 4, 8, 15);\n\nfunction render_identicon_patch(ctx, x, y, size, patch, turn, invert, foreColor, backColor) {\n  patch %= patchTypes.length;\n  turn %= 4;\n\n  if (patch == 15) {\n    invert = !invert;\n  }\n\n  var vertices = patchTypes[patch];\n  var offset = size / 2;\n  var scale = size / 4;\n  ctx.save(); // paint background\n\n  ctx.fillStyle = invert ? foreColor : backColor;\n  ctx.fillRect(x, y, size, size); // build patch path\n\n  ctx.translate(x + offset, y + offset);\n  ctx.rotate(turn * Math.PI / 2);\n  ctx.beginPath();\n  ctx.moveTo(vertices[0] % 5 * scale - offset, Math.floor(vertices[0] / 5) * scale - offset);\n\n  for (var i = 1; i < vertices.length; i++) {\n    ctx.lineTo(vertices[i] % 5 * scale - offset, Math.floor(vertices[i] / 5) * scale - offset);\n  }\n\n  ctx.closePath(); // offset and rotate coordinate space by patch position (x, y) and\n  // 'turn' before rendering patch shape\n  // render rotated patch using fore color (back color if inverted)\n\n  ctx.fillStyle = invert ? backColor : foreColor;\n  ctx.fill(); // restore rotation\n\n  ctx.restore();\n}\n\nfunction render_identicon(ctx, code, size) {\n  var patchSize = size / 3;\n  var middleType = centerPatchTypes[code & 3];\n  var middleInvert = (code >> 2 & 1) != 0;\n  var cornerType = code >> 3 & 15;\n  var cornerInvert = (code >> 7 & 1) != 0;\n  var cornerTurn = code >> 8 & 3;\n  var sideType = code >> 10 & 15;\n  var sideInvert = (code >> 14 & 1) != 0;\n  var sideTurn = code >> 15 & 3;\n  var blue = code >> 16 & 31;\n  var green = code >> 21 & 31;\n  var red = code >> 27 & 31;\n  var foreColor = 'rgb(' + (red << 3) + ',' + (green << 3) + ',' + (blue << 3) + ')';\n  var backColor = 'rgb(255,255,255)'; // middle patch\n\n  render_identicon_patch(ctx, patchSize, patchSize, patchSize, middleType, 0, middleInvert, foreColor, backColor); // side patchs, starting from top and moving clock-wise\n\n  render_identicon_patch(ctx, patchSize, 0, patchSize, sideType, sideTurn++, sideInvert, foreColor, backColor);\n  render_identicon_patch(ctx, patchSize * 2, patchSize, patchSize, sideType, sideTurn++, sideInvert, foreColor, backColor);\n  render_identicon_patch(ctx, patchSize, patchSize * 2, patchSize, sideType, sideTurn++, sideInvert, foreColor, backColor);\n  render_identicon_patch(ctx, 0, patchSize, patchSize, sideType, sideTurn++, sideInvert, foreColor, backColor); // corner patchs, starting from top left and moving clock-wise\n\n  render_identicon_patch(ctx, 0, 0, patchSize, cornerType, cornerTurn++, cornerInvert, foreColor, backColor);\n  render_identicon_patch(ctx, patchSize * 2, 0, patchSize, cornerType, cornerTurn++, cornerInvert, foreColor, backColor);\n  render_identicon_patch(ctx, patchSize * 2, patchSize * 2, patchSize, cornerType, cornerTurn++, cornerInvert, foreColor, backColor);\n  render_identicon_patch(ctx, 0, patchSize * 2, patchSize, cornerType, cornerTurn++, cornerInvert, foreColor, backColor);\n}\n\nfunction _gen(str, size, callback) {\n  var hash = crypto.createHash('sha1').update(Buffer.from(str, 'utf8')).digest('binary');\n  var code = hash.charCodeAt(0) << 24 | hash.charCodeAt(1) << 16 | hash.charCodeAt(2) << 8 | hash.charCodeAt(3);\n  var canvas = isBrowser ? new Canvas(size, size) : Canvas.createCanvas(size, size);\n  var ctx = canvas.getContext('2d');\n  render_identicon(ctx, code, size);\n\n  if (callback && typeof callback === 'function') {\n    if (!canvas.toBuffer) {\n      var imageData = ctx.getImageData(0, 0, size, size);\n      callback(null, canvas.toDataURL('image/png'));\n      return;\n    }\n\n    return canvas.toBuffer(function (err, buffer) {\n      callback(err, buffer);\n    });\n  } else {\n    if (!canvas.toBuffer) {\n      return canvas.toDataURL('image/png');\n    }\n\n    return canvas.toBuffer();\n  }\n}\n\nexports.generate = exports.gen = function (str, size, callback) {\n  if (typeof str === 'object' && typeof size === 'function') {\n    return _gen(str.id, str.size, size);\n  }\n\n  return _gen(str, size, callback);\n};\n\nexports.generateSync = exports.genSync = function (str, size) {\n  if (typeof str === 'object') {\n    return _gen(str.id, str.size);\n  }\n\n  return _gen(str, size);\n};","map":null,"metadata":{},"sourceType":"script"}